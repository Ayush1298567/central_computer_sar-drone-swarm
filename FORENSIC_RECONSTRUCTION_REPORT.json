{
  "status": "partial",
  "timestamp": "2025-10-11T00:00:00Z",
  "repository_root": "c:/Central_Computer/central_computer_sar-drone-swarm-main/central_computer_sar-drone-swarm-main",
  "git_info": {
    "branch": "NO_GIT_REPOSITORY",
    "last_commit": "NO_GIT_REPOSITORY",
    "tracked_files": [],
    "note": "No .git directory found - repository is not under version control"
  },
  "filesystem_statistics": {
    "total_files_analyzed": 269,
    "total_size_bytes": 3025603,
    "total_size_mb": 2.89,
    "present_files": 269,
    "empty_files": 0,
    "corrupted_files": 0,
    "binary_files": 0
  },
  "filesystem_summary": [
    {
      "path": ".gitattributes",
      "size": 66,
      "hash": "BA3DFE345280BDCC5E817BB02CF49B8B8D8E1C4C",
      "status": "present",
      "head_excerpt": "# Auto detect text files and perform LF normalization\\n* text=auto",
      "tail_excerpt": "# Auto detect text files and perform LF normalization\\n* text=auto"
    },
    {
      "path": ".gitignore",
      "size": 1081,
      "hash": "0300FA5F3786CE4513BE722ACC6AD8BC674A250B",
      "status": "present",
      "head_excerpt": "# Python\\n__pycache__/\\n*.py[cod]\\n*$py.class\\n*.so",
      "tail_excerpt": "*_test_results.json\\n*_test.log\\nreal_system_test_*\\n# Documentation artifacts\\n*.md.bak"
    },
    {
      "path": "AI_DECISION_MATRIX.md",
      "size": 9333,
      "hash": "C5C265C7E57E7E1760E91F5C4426CB3A8B30ECF2",
      "status": "present",
      "head_excerpt": "# ü§ñ AI Decision Matrix - SAR Drone Swarm System\\n## üìä Decision Authority Matrix\\n| **Decision Type** | **AI Authority** | **Human Override** | **Escalation Time** | **Confidence Threshold** |\\n|-------------------|------------------|-------------------|-------------------|-------------------------|\\n| **Battery Management** | Full Auto | Emergency Only | N/A | N/A |",
      "tail_excerpt": "- **Confidence Calibration**: ¬±10% accuracy\\n- **Learning Effectiveness**: Measurable improvement\\n---\\n**ü§ñ This AI Decision Matrix ensures consistent, safe, and effective AI operation in life-saving SAR missions.**\\n**Remember: AI enhances human capabilities but never replaces human judgment in critical decisions.**"
    },
    {
      "path": "AI_PLAYBOOK.md",
      "size": 9349,
      "hash": "F59AFE431D65494311533FB2EA9BD7CCBC5238CF",
      "status": "present",
      "head_excerpt": "# ü§ñ SAR Drone Swarm System - AI Playbook\\n## üìã Overview\\nThis playbook defines the AI decision-making framework for the SAR Drone Swarm System. It ensures consistent, safe, and effective AI behavior in life-saving operations.\\n---\\n## üéØ AI Decision Hierarchy",
      "tail_excerpt": "- **Complete audit trail**\\n- **Regular safety reviews**\\n---\\n**ü§ñ This AI Playbook ensures safe, effective, and reliable AI operation in life-saving SAR missions.**\\n**Remember: AI is a powerful tool, but human judgment and oversight remain paramount in emergency operations.**"
    },
    {
      "path": "Build_plan.md",
      "size": 105994,
      "hash": "99DE01AEA33E263C671DC372648B7280EDF9905B",
      "status": "present",
      "head_excerpt": "# Mission Commander SAR Drone System - Complete Implementation Guide for Cursor\\n## CRITICAL MISSION CONTEXT - READ FIRST\\nYou are building **Mission Commander**, a Search and Rescue drone control system that will be used to save human lives in disaster scenarios. This is production software where every decision you make could determine whether someone's loved one comes home alive.\\n**ZERO TOLERANCE FOR PLACEHOLDER CODE**: Every function you write must perform its stated purpose completely with ",
      "tail_excerpt": "- Provides **comprehensive data collection** for continuous improvement\\n- Focuses on **exceptional user experience** and **professional tools**\\n- Creates **real value** for emergency responders immediately\\n**This approach transforms an impossible AI project into a highly valuable, buildable professional tool that emergency services can actually use to save lives.**\\nReady to rewrite the build plan with this realistic but super high-value approach?"
    },
    {
      "path": "directory_forensic.json",
      "size": 9528,
      "hash": "E8A70F4EABF575EB72B63C8118760AC92F80DD1E",
      "status": "present",
      "head_excerpt": "Ôªø[\\n    {\\n        \"FullName\":  \"C:\\\\Central_Computer\\\\central_computer_sar-drone-swarm-main\\\\central_computer_sar-drone-swarm-main\\\\.github\"\\n    },\\n    {",
      "tail_excerpt": "    },\\n    {\\n        \"FullName\":  \"C:\\\\Central_Computer\\\\central_computer_sar-drone-swarm-main\\\\central_computer_sar-drone-swarm-main\\\\monitoring\\\\grafana\\\\provisioning\\\\datasources\"\\n    }\\n]"
    },
    {
      "path": "directory_manifest.json",
      "size": 9528,
      "hash": "E8A70F4EABF575EB72B63C8118760AC92F80DD1E",
      "status": "present",
      "head_excerpt": "Ôªø[\\n    {\\n        \"FullName\":  \"C:\\\\Central_Computer\\\\central_computer_sar-drone-swarm-main\\\\central_computer_sar-drone-swarm-main\\\\.github\"\\n    },\\n    {",
      "tail_excerpt": "    },\\n    {\\n        \"FullName\":  \"C:\\\\Central_Computer\\\\central_computer_sar-drone-swarm-main\\\\central_computer_sar-drone-swarm-main\\\\monitoring\\\\grafana\\\\provisioning\\\\datasources\"\\n    }\\n]"
    },
    {
      "path": "docker-compose.prod.yml",
      "size": 3835,
      "hash": "3877CE04E1354852ABD9BD3115653E38D9032FFE",
      "status": "present",
      "head_excerpt": "version: '3.8'\\nservices:\\n  # PostgreSQL Database\\n  postgres:\\n    image: postgres:15-alpine",
      "tail_excerpt": "  grafana_data:\\n  frontend_static:\\nnetworks:\\n  sar-network:\\n    driver: bridge"
    },
    {
      "path": "docker-compose.production.yml",
      "size": 9824,
      "hash": "BB5DA4CB3AC85D84D5A1E86C7EA8E82146F6F06D",
      "status": "present",
      "head_excerpt": "version: '3.8'\\nservices:\\n  # Primary operational database\\n  postgres:\\n    image: postgres:15-alpine",
      "tail_excerpt": "  elasticsearch_data:\\n  prometheus_data:\\n  grafana_data:\\n  mlflow_data:\\n  ollama_data:"
    },
    {
      "path": "docker-compose.yml",
      "size": 2813,
      "hash": "568E6FCFA7ABEB57E2B4BF7F524C56C354207A8B",
      "status": "present",
      "head_excerpt": "version: '3.8'\\nservices:\\n  # Backend API service\\n  backend:\\n    build:",
      "tail_excerpt": "  ollama_data:\\n    driver: local\\nnetworks:\\n  sar-network:\\n    driver: bridge"
    },
    {
      "path": "DRONE_CONNECTION_SYSTEM.md",
      "size": 11184,
      "hash": "72C8CB8A30B9BDA8628CABA18AB4EBF382F7F9A8",
      "status": "present",
      "head_excerpt": "# üöÅ Drone Connection System Documentation\\n## Overview\\nThe SAR Drone Swarm System now includes a comprehensive **Drone Connection Hub** that supports multiple wireless communication protocols for connecting to real drones. This system provides a unified interface for managing drone connections, sending commands, and receiving telemetry data.\\n## üèóÔ∏è System Architecture\\n```",
      "tail_excerpt": "- [System Architecture Guide](Build_plan.md)\\n- [Mission Planning Documentation](README.md)\\n- [Emergency Procedures](docs/OPERATIONAL_RUNBOOKS.md)\\n---\\n**üöÅ Ready to Connect Drones and Save Lives! üÜò**"
    },
    {
      "path": "filesystem_forensic.json",
      "size": 55324,
      "hash": "9FD8314306F1D3F5CBC94C3114E84B57E726D457",
      "status": "present",
      "head_excerpt": "Ôªø[\\n    {\\n        \"FullName\":  \"C:\\\\Central_Computer\\\\central_computer_sar-drone-swarm-main\\\\central_computer_sar-drone-swarm-main\\\\.gitattributes\",\\n        \"Length\":  66\\n    },",
      "tail_excerpt": "    {\\n        \"FullName\":  \"C:\\\\Central_Computer\\\\central_computer_sar-drone-swarm-main\\\\central_computer_sar-drone-swarm-main\\\\monitoring\\\\grafana\\\\provisioning\\\\datasources\\\\prometheus.yml\",\\n        \"Length\":  159\\n    }\\n]"
    },
    {
      "path": "filesystem_manifest.json",
      "size": 54944,
      "hash": "1BED33ED17B6F2FCDEFFCC51F94572ECBB48CC70",
      "status": "present",
      "head_excerpt": "Ôªø[\\n    {\\n        \"FullName\":  \"C:\\\\Central_Computer\\\\central_computer_sar-drone-swarm-main\\\\central_computer_sar-drone-swarm-main\\\\.gitattributes\",\\n        \"Length\":  66\\n    },",
      "tail_excerpt": "    {\\n        \"FullName\":  \"C:\\\\Central_Computer\\\\central_computer_sar-drone-swarm-main\\\\central_computer_sar-drone-swarm-main\\\\monitoring\\\\grafana\\\\provisioning\\\\datasources\\\\prometheus.yml\",\\n        \"Length\":  159\\n    }\\n]"
    },
    {
      "path": "ISEF_PROJECT_GUIDE.md",
      "size": 10785,
      "hash": "30D6A9D6BE8D6BF9C10817C507A0873065A98D5E",
      "status": "present",
      "head_excerpt": "# üèÜ ISEF-Winning SAR Drone System\\n## üéØ **ISEF Competition Strategy**\\nThis system is designed to **win ISEF** by demonstrating:\\n1. **Real Scientific Innovation** - Novel algorithms and approaches\\n2. **Practical Impact** - Solving real-world problems",
      "tail_excerpt": "- \"The results show statistically significant improvements\"\\n- \"This technology has applications beyond search and rescue\"\\n**This system will win ISEF because it combines real scientific innovation with practical impact, demonstrated through an impressive technical implementation that judges can see and interact with.**\\n---\\n*\"From scientific innovation to ISEF victory - a system designed to impress judges and change the world.\"*"
    },
    {
      "path": "README.md",
      "size": 14853,
      "hash": "E8F74184FFCF7B19CA50A88B7C578FD1AE8061E7",
      "status": "present",
      "head_excerpt": "# üöÅ SAR Drone Swarm Control System\\n[![Production Ready](https://img.shields.io/badge/Status-Production%20Ready-brightgreen)](https://github.com/Ayush1298567/central_computer_sar-drone-swarm)\\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\\n[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\\n[![React 18](https://img.shields.io/badge/React-18-blue.svg)](https://reactjs.org/)",
      "tail_excerpt": "- **Last Updated**: October 2024\\n- **Version**: 1.0.0\\n---\\n**‚ö†Ô∏è IMPORTANT**: This system is designed for life-saving operations. Always follow proper safety protocols and ensure adequate training before deployment in real SAR scenarios.\\n**üöÅ Ready to save lives with drone technology! üÜòüèÜ**"
    },
    {
      "path": "start_system.bat",
      "size": 633,
      "hash": "7768FE6AEBD5B93DE8AA407C435FCD695E00C8A8",
      "status": "present",
      "head_excerpt": "@echo off\\necho üöÅ SAR Drone Swarm System - Windows Startup\\necho ==========================================\\necho.\\necho Starting all services in one command...",
      "tail_excerpt": "echo üöÄ Launching SAR Drone Swarm System...\\npython start_system.py\\necho.\\necho üõë System shutdown complete.\\npause"
    },
    {
      "path": "start_system.py",
      "size": 7634,
      "hash": "055C9BE6DF146657E544125D8D0A4C01928F11C6",
      "status": "present",
      "head_excerpt": "#!/usr/bin/env python3\\n\"\"\"\\nSAR Drone Swarm System - Single Command Startup\\nRuns all services in one process with proper cleanup\\n\"\"\"",
      "tail_excerpt": "    \"\"\"Main entry point\"\"\"\\n    manager = SARSystemManager()\\n    return manager.run()\\nif __name__ == \"__main__\":\\n    sys.exit(main())"
    },
    {
      "path": "SYSTEM_COMPLETION_REPORT.md",
      "size": 8690,
      "hash": "7BFD55F69AF12AD505FD70DDEF1DCFC84BDE497D",
      "status": "present",
      "head_excerpt": "# üéâ SAR Drone System - Complete Implementation Report\\n## ‚úÖ **SYSTEM IS NOW FULLY FUNCTIONAL FOR REAL-WORLD SAR OPERATIONS**\\nAfter comprehensive analysis and implementation, the SAR drone swarm system is now **production-ready** and capable of handling real search and rescue operations.\\n---\\n## üèÜ **What Has Been Completed**",
      "tail_excerpt": "- ‚úÖ Connect to real drones\\n- ‚úÖ Execute real missions\\n- ‚úÖ Handle real emergencies\\n- ‚úÖ Save real lives\\n**The system is ready for deployment in actual SAR scenarios! üöÅüÜòüèÜ**"
    },
    {
      "path": ".github\\workflows\\ci-cd-pipeline.yml",
      "size": 12533,
      "hash": "8372D4030C4553DF026CF29D93EA2BA008E01CED",
      "status": "present",
      "head_excerpt": "name: SAR Drone System CI/CD Pipeline\\non:\\n  push:\\n    branches: [ main, develop ]\\n  pull_request:",
      "tail_excerpt": "        if [ \"${{ needs.deploy-staging.result }}\" == \"success\" ] || [ \"${{ needs.deploy-production.result }}\" == \"success\" ]; then\\n          echo \"‚úÖ Pipeline completed successfully\"\\n        else\\n          echo \"‚ùå Pipeline failed\"\\n        fi"
    },
    {
      "path": ".github\\workflows\\ci-cd.yml",
      "size": 4836,
      "hash": "6277F5C8BAA28BF99730B25861845948FB6A9C1E",
      "status": "present",
      "head_excerpt": "name: CI/CD Pipeline\\non:\\n  push:\\n    branches: [ main, develop ]\\n  pull_request:",
      "tail_excerpt": "        # Examples:\\n        # - kubectl apply -f k8s/\\n        # - docker-compose -f docker-compose.prod.yml pull\\n        # - docker-compose -f docker-compose.prod.yml up -d\\n        echo \"Deployment completed successfully!\""
    },
    {
      "path": "ai_innovations\\real_genetic_optimizer.py",
      "size": 26778,
      "hash": "CE0B615EA0E7E223DB660E2F1AB63AAB8E290942",
      "status": "present",
      "head_excerpt": "\"\"\"\\nREAL Genetic Algorithm for SAR Search Pattern Optimization\\nConnected to actual drone simulation with real fitness evaluation\\n\"\"\"\\nimport numpy as np",
      "tail_excerpt": "                \"simulators\": len(self.simulator_pool)\\n            }\\n        }\\n# Global genetic optimizer instance\\nreal_genetic_optimizer = RealGeneticSearchOptimizer()"
    },
    {
      "path": "backend\\.env.example",
      "size": 1583,
      "hash": "E6BC8B806C41C1E0200C860F95039A4ED4DFC307",
      "status": "present",
      "head_excerpt": "# SAR Mission Commander Backend Configuration\\n# Copy this file to .env and adjust values for your environment\\n# Server Configuration\\nHOST=0.0.0.0\\nPORT=8000",
      "tail_excerpt": "# Development overrides (uncomment for development)\\n# DATABASE_URL=sqlite:///./sar_missions.db\\n# DEBUG=true\\n# LOG_LEVEL=DEBUG\\n# ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000"
    },
    {
      "path": "backend\\Dockerfile",
      "size": 1351,
      "hash": "9B6CAB084E6FF41D81E667EF35ADE26145A2EF2F",
      "status": "present",
      "head_excerpt": "# Multi-stage build for SAR Mission Commander Backend\\n# Stage 1: Build stage\\nFROM python:3.11-slim as builder\\nWORKDIR /app\\n# Install build dependencies",
      "tail_excerpt": "# Health check\\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\\n    CMD curl -f http://localhost:8000/health || exit 1\\n# Run the application\\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--workers\", \"4\"]"
    },
    {
      "path": "backend\\Dockerfile.production",
      "size": 1372,
      "hash": "31B6510A29B40E59E6AC9C6172D243F4AFAE4244",
      "status": "present",
      "head_excerpt": "# Production Dockerfile for SAR Drone System Backend\\nFROM python:3.11-slim\\n# Set environment variables\\nENV PYTHONDONTWRITEBYTECODE=1 \\\\n    PYTHONUNBUFFERED=1 \\",
      "tail_excerpt": "    CMD curl -f http://localhost:8000/health || exit 1\\n# Expose port\\nEXPOSE 8000\\n# Start command\\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--workers\", \"4\"]"
    },
    {
      "path": "backend\\init_db.py",
      "size": 7726,
      "hash": "A15004C1F7689DDAB477F47F23036B7EA11CAEF0",
      "status": "present",
      "head_excerpt": "\"\"\"\\nDatabase initialization script.\\n\"\"\"\\nimport sys\\nimport os",
      "tail_excerpt": "        raise\\n    finally:\\n        db.close()\\nif __name__ == \"__main__\":\\n    init_database()"
    },
    {
      "path": "backend\\requirements.txt",
      "size": 2348,
      "hash": "2CDBDFE7654DDC53EBAB2EFF0E3414791729F69C",
      "status": "present",
      "head_excerpt": "# Core FastAPI dependencies\\nfastapi==0.104.1\\nuvicorn[standard]==0.24.0\\npython-multipart==0.0.6\\n# Database",
      "tail_excerpt": "faker==20.1.0                  # Generate fake data\\npandas==2.1.4                  # Data manipulation\\nscipy==1.11.4                  # Scientific computing\\n# System Monitoring\\npsutil==5.9.6                  # System resource monitoring"
    },
    {
      "path": "backend\\__init__.py",
      "size": 256,
      "hash": "8B244D9301AE98A1AA195779D21DB3702E0F28BB",
      "status": "present",
      "head_excerpt": "\"\"\"\\nSAR Drone Mission Commander Backend\\nA comprehensive backend system for coordinating search and rescue drone operations\\nwith AI-powered mission planning and real-time command capabilities.\\n\"\"\"",
      "tail_excerpt": "A comprehensive backend system for coordinating search and rescue drone operations\\nwith AI-powered mission planning and real-time command capabilities.\\n\"\"\"\\n__version__ = \"1.0.0\"\\n__author__ = \"SAR Mission Commander\""
    },
    {
      "path": "backend\\app\\main.py",
      "size": 6190,
      "hash": "4DA2BF6EFF3B308726CC6E1D237EDA25B8B22E25",
      "status": "present",
      "head_excerpt": "from fastapi import FastAPI, HTTPException, Depends, status\\nfrom fastapi.middleware.cors import CORSMiddleware\\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\\nfrom fastapi.responses import JSONResponse\\nimport logging",
      "tail_excerpt": "        host=\"0.0.0.0\",\\n        port=8000,\\n        reload=settings.DEBUG,\\n        log_level=settings.LOG_LEVEL.lower()\\n    )"
    },
    {
      "path": "backend\\app\\__init__.py",
      "size": 44,
      "hash": "A58BA5D28D7ABDCD37D57D8BDE4EE0D5532DC869",
      "status": "present",
      "head_excerpt": "# SAR Mission Commander Backend Application",
      "tail_excerpt": "# SAR Mission Commander Backend Application"
    },
    {
      "path": "backend\\app\\ai\\ai_governance.py",
      "size": 12320,
      "hash": "AAFE0F8D00A496B424B5D34C01E511218D12F8E4",
      "status": "present",
      "head_excerpt": "\"\"\"\\nAI Governance System for SAR Drone Swarm\\nImplements decision authority, confidence tracking, and safety protocols\\n\"\"\"\\nimport logging",
      "tail_excerpt": "            \"status\": \"operational\" if success_rate > 0.9 else \"degraded\"\\n        }\\n# Global instances\\nai_safety = AISafetyProtocols()\\nai_performance = AIPerformanceMonitor()"
    },
    {
      "path": "backend\\app\\ai\\conversation.py",
      "size": 20056,
      "hash": "D89B29C359FD008D84C6F186A73B79E603B086DE",
      "status": "present",
      "head_excerpt": "\"\"\"\\nConversation Engine for SAR Mission Commander\\nHandles natural language processing, chat interactions, and AI conversations\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            \"templates_loaded\": len(self.conversation_templates),\\n            \"questions_loaded\": len(self.question_bank)\\n        }\\n# Global conversation engine instance\\nconversation_engine = ConversationEngine()"
    },
    {
      "path": "backend\\app\\ai\\decision_framework.py",
      "size": 26999,
      "hash": "70790EC8A0EAA2C7076248619F7E8FB652D218C8",
      "status": "present",
      "head_excerpt": "\"\"\"\\nAdvanced AI Decision Framework for SAR Operations\\nSophisticated decision-making system with explainable AI and multi-objective optimization\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            await self._update_learning_system(decision)\\n        except Exception as e:\\n            logger.error(f\"Decision evaluation failed: {e}\")\\n# Global decision framework instance\\ndecision_framework = AdvancedDecisionFramework()"
    },
    {
      "path": "backend\\app\\ai\\knowledge_graph.py",
      "size": 44723,
      "hash": "18EC33F9282AA0ABC8D3717F14F2311EE5FB9028",
      "status": "present",
      "head_excerpt": "\"\"\"\\nKnowledge Graph System for SAR Operations\\nAdvanced graph-based learning and optimization for mission intelligence\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "        except Exception as e:\\n            logger.error(f\"Failed to get graph statistics: {e}\")\\n            return {\"error\": str(e)}\\n# Global knowledge graph instance\\nknowledge_graph = SARKnowledgeGraph()"
    },
    {
      "path": "backend\\app\\ai\\llm_intelligence.py",
      "size": 16629,
      "hash": "082CAB317BD5EFA3B57358B9B88D9CD59A11FBA7",
      "status": "present",
      "head_excerpt": "import logging\\nfrom typing import Dict, Any, List, Optional\\nimport asyncio\\nfrom datetime import datetime\\nfrom enum import Enum",
      "tail_excerpt": "            status[\"overall_status\"] = \"degraded\"\\n        return status\\n# Global instances with correct names\\nllm_intelligence = LLMIntelligence()\\nllm_intelligence_engine = llm_intelligence  # Alias for compatibility"
    },
    {
      "path": "backend\\app\\ai\\ollama_client.py",
      "size": 10405,
      "hash": "D34434C4EBA9473412F880CEE5AF9270732050CF",
      "status": "present",
      "head_excerpt": "import logging\\nimport httpx\\nimport asyncio\\nfrom typing import Optional, Dict, Any, List\\nfrom app.core.config import settings",
      "tail_excerpt": "                \"error\": str(e),\\n                \"status\": \"unhealthy\"\\n            }\\n# Global instance\\nollama_client = OllamaClient()"
    },
    {
      "path": "backend\\app\\ai\\ollama_intelligence.py",
      "size": 15700,
      "hash": "A8E2B2E122EE3FBA702883039712884DA489BAAB",
      "status": "present",
      "head_excerpt": "\"\"\"\\nOllama Intelligence Engine for SAR Mission Commander\\nHandles Ollama-specific AI operations and model management\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            \"task_history_size\": len(self.task_history),\\n            \"model_preferences\": len(self.model_preferences)\\n        }\\n# Global Ollama intelligence engine instance\\nollama_intelligence_engine = OllamaIntelligenceEngine()"
    },
    {
      "path": "backend\\app\\ai\\rag_system.py",
      "size": 28219,
      "hash": "DFF9C48C99C05CF31FDC59FB7E61432B6721A30D",
      "status": "present",
      "head_excerpt": "\"\"\"\\nProduction-grade RAG (Retrieval-Augmented Generation) system for SAR operations\\nProvides semantic search, knowledge retrieval, and contextual AI responses\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "        except Exception as e:\\n            logger.error(f\"Failed to get knowledge statistics: {e}\")\\n            return {}\\n# Global RAG instance\\nsar_rag = SARKnowledgeRAG()"
    },
    {
      "path": "backend\\app\\ai\\real_computer_vision.py",
      "size": 22334,
      "hash": "CBCEF8AF77617B60116B3DF8F552672D82B1A4FE",
      "status": "present",
      "head_excerpt": "\"\"\"\\nREAL Computer Vision Engine for SAR Mission Commander\\nUses actual YOLOv8 model for object detection with real confidence scoring\\n\"\"\"\\nimport cv2",
      "tail_excerpt": "                \"inferences_per_second\": 1.0 / self.avg_processing_time if self.avg_processing_time > 0 else 0\\n            }\\n        }\\n# Global real computer vision engine instance\\nreal_computer_vision_engine = RealComputerVisionEngine()"
    },
    {
      "path": "backend\\app\\ai\\real_ml_models.py",
      "size": 31504,
      "hash": "40309721C6ABCC3F6E5389D51D564B86FD0340D5",
      "status": "present",
      "head_excerpt": "\"\"\"\\nREAL ML Models for SAR Mission Commander\\nImplements actual machine learning models for decision making, pattern recognition, and optimization\\n\"\"\"\\nimport numpy as np",
      "tail_excerpt": "                for name, model in self.models.items()\\n            }\\n        }\\n# Global ML models instance\\nreal_ml_models = RealMLModels()"
    },
    {
      "path": "backend\\app\\ai\\__init__.py",
      "size": 1280,
      "hash": "4346CAA5D3A3BC3C0569514DBCC89860A917E673",
      "status": "present",
      "head_excerpt": "\"\"\"\\nAI Intelligence Engine for SAR Mission Commander\\nExports all AI-related components for easy access\\n\"\"\"\\nfrom .ollama_client import OllamaClient",
      "tail_excerpt": "    \"AISafetyProtocols\",\\n    \"AIPerformanceMonitor\",\\n    \"ai_safety\",\\n    \"ai_performance\"\\n]"
    },
    {
      "path": "backend\\app\\api\\analytics.py",
      "size": 13525,
      "hash": "26159EDDBE7E86C0E54EDABB7D8810FEACA98342",
      "status": "present",
      "head_excerpt": "\"\"\"\\nAnalytics API endpoints for SAR Mission Commander\\n\"\"\"\\nfrom fastapi import APIRouter, HTTPException, Query\\nfrom typing import Optional, Dict, Any, List",
      "tail_excerpt": "            }\\n        }\\n    except Exception as e:\\n        logger.error(f\"Failed to get mission trends: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Failed to retrieve mission trends\")"
    },
    {
      "path": "backend\\app\\api\\drones.py",
      "size": 12840,
      "hash": "550B4D91AFB062CBA23D43E0067BC2A603971992",
      "status": "present",
      "head_excerpt": "\"\"\"\\nDrone API endpoints for SAR Mission Commander\\n\"\"\"\\nfrom fastapi import APIRouter, HTTPException, Depends, BackgroundTasks\\nfrom typing import List, Optional, Dict, Any",
      "tail_excerpt": "            ]\\n        }\\n    except Exception as e:\\n        logger.error(f\"Failed to get fleet status: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Failed to retrieve fleet status\")"
    },
    {
      "path": "backend\\app\\api\\missions.py",
      "size": 8087,
      "hash": "C7D5328901DF54D6BEAA46BF14A054373D67547B",
      "status": "present",
      "head_excerpt": "\"\"\"\\nMission API endpoints for SAR Mission Commander\\n\"\"\"\\nfrom fastapi import APIRouter, Depends, HTTPException, status\\nfrom sqlalchemy.orm import Session",
      "tail_excerpt": "    mission.end_time = datetime.utcnow()\\n    mission.updated_at = datetime.utcnow()\\n    db.commit()\\n    db.refresh(mission)\\n    return mission"
    },
    {
      "path": "backend\\app\\api\\websocket.py",
      "size": 5875,
      "hash": "07F1CD2763B6751A3251408397BC6C23D21F15BA",
      "status": "present",
      "head_excerpt": "\"\"\"\\nWebSocket endpoints for SAR Mission Commander\\n\"\"\"\\nfrom fastapi import WebSocket, WebSocketDisconnect, APIRouter\\nimport json",
      "tail_excerpt": "    await connection_manager.send_to_user({\\n        \"type\": message_type,\\n        \"data\": data,\\n        \"timestamp\": datetime.utcnow().isoformat()\\n    }, user_id)"
    },
    {
      "path": "backend\\app\\api\\__init__.py",
      "size": 16,
      "hash": "0D2F5D254E63763D676BDEC8CA83418251B92F4D",
      "status": "present",
      "head_excerpt": "# API endpoints",
      "tail_excerpt": "# API endpoints"
    },
    {
      "path": "backend\\app\\api\\api_v1\\api.py",
      "size": 1614,
      "hash": "EB6EE650B1E25F6C96D092BB37427C240996F629",
      "status": "present",
      "head_excerpt": "from fastapi import APIRouter\\nfrom app.api.api_v1.endpoints import (\\n    websocket,\\n    missions,\\n    drones,",
      "tail_excerpt": "api_router.include_router(chat.router, prefix=\"/chat\", tags=[\"chat\"])\\napi_router.include_router(video.router, prefix=\"/video\", tags=[\"video\"])\\napi_router.include_router(weather.router, prefix=\"/weather\", tags=[\"weather\"])\\napi_router.include_router(ai_governance.router, prefix=\"/ai-governance\", tags=[\"ai-governance\"])\\napi_router.include_router(test_data.router, prefix=\"/test-data\", tags=[\"test-data\"])"
    },
    {
      "path": "backend\\app\\api\\api_v1\\chat.py",
      "size": 3842,
      "hash": "1BE4903232F3E03551E39C7C5777855CAA176901",
      "status": "present",
      "head_excerpt": "from fastapi import APIRouter, Depends, HTTPException\\nfrom sqlalchemy.orm import Session\\nfrom datetime import datetime\\nfrom app.core.database import get_db\\nfrom app.models import Mission",
      "tail_excerpt": "            \"message\": \"Message deleted successfully\"\\n        }\\n    except Exception as e:\\n        db.rollback()\\n        raise HTTPException(status_code=500, detail=f\"Failed to delete message: {str(e)}\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\dependencies.py",
      "size": 221,
      "hash": "153F90806C7FFBE20FDBEC53C111DC410E9FEAA1",
      "status": "present",
      "head_excerpt": "\"\"\"\\nCommon dependencies for API endpoints.\\n\"\"\"\\nfrom app.core.database import SessionLocal\\ndef get_db():",
      "tail_excerpt": "    db = SessionLocal()\\n    try:\\n        yield db\\n    finally:\\n        db.close()"
    },
    {
      "path": "backend\\app\\api\\api_v1\\discoveries.py",
      "size": 4976,
      "hash": "82D4FF79C085CD306D5726B97319494CDEBE95FF",
      "status": "present",
      "head_excerpt": "from fastapi import APIRouter, Depends, HTTPException\\nfrom sqlalchemy.orm import Session\\nfrom datetime import datetime\\nfrom app.core.database import get_db\\nfrom app.models import Discovery",
      "tail_excerpt": "            \"message\": \"Discovery deleted successfully\"\\n        }\\n    except Exception as e:\\n        db.rollback()\\n        raise HTTPException(status_code=500, detail=f\"Failed to delete discovery: {str(e)}\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\drones.py",
      "size": 6220,
      "hash": "D0BD97FABDB4566F2E5E1F9E9C119690E9248436",
      "status": "present",
      "head_excerpt": "from fastapi import APIRouter, Depends, HTTPException\\nfrom sqlalchemy.orm import Session\\nfrom datetime import datetime\\nfrom app.core.database import get_db\\nfrom app.models import Drone",
      "tail_excerpt": "            \"message\": \"Drone deleted successfully\"\\n        }\\n    except Exception as e:\\n        db.rollback()\\n        raise HTTPException(status_code=500, detail=f\"Failed to delete drone: {str(e)}\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\missions.py",
      "size": 6124,
      "hash": "1A89FE68A269BC0DAA0CE619D4813E48A65AF922",
      "status": "present",
      "head_excerpt": "from fastapi import APIRouter, Depends, HTTPException\\nfrom sqlalchemy.orm import Session\\nfrom typing import List\\nfrom datetime import datetime\\nfrom app.core.database import get_db",
      "tail_excerpt": "            }\\n            for msg in messages\\n        ],\\n        \"count\": len(messages)\\n    }"
    },
    {
      "path": "backend\\app\\api\\api_v1\\schemas.py",
      "size": 7994,
      "hash": "B6051A4EAF1A230B5630FF72F00EF7D2B56821E6",
      "status": "present",
      "head_excerpt": "\"\"\"\\nPydantic schemas for API request/response models.\\n\"\"\"\\nfrom typing import List, Optional, Dict, Any\\nfrom datetime import datetime",
      "tail_excerpt": "    id: int\\n    status: str\\n    created_at: datetime\\n    updated_at: datetime\\n    completed_at: Optional[datetime] = None"
    },
    {
      "path": "backend\\app\\api\\api_v1\\websocket.py",
      "size": 17004,
      "hash": "7DC9CC19224A1A3C479A2E26A003294362D70251",
      "status": "present",
      "head_excerpt": "import logging\\nfrom typing import Dict, Set, Any\\nfrom fastapi import WebSocket, WebSocketDisconnect, Depends, HTTPException, status\\nfrom fastapi.routing import APIRouter\\nimport asyncio",
      "tail_excerpt": "    \"\"\"Broadcast mission update to all subscribed connections\"\"\"\\n    await manager.broadcast_to_topic({\\n        \"type\": \"mission_updates\",\\n        \"payload\": mission_data\\n    }, \"mission_updates\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\__init__.py",
      "size": 1579,
      "hash": "0F2DD23B8B58F61E09E6CB5706A62DB262D11F23",
      "status": "present",
      "head_excerpt": "from fastapi import APIRouter\\nfrom .endpoints import drones, analytics, computer_vision, coordination, learning_system, tasks, weather, missions, discoveries, chat, video, drone_connections, real_mission_execution\\nfrom .websocket import router as websocket_router\\napi_router = APIRouter()\\n# Include all routers from endpoints directory and websocket",
      "tail_excerpt": "api_router.include_router(learning_system.router, prefix=\"/learning\", tags=[\"learning\"])\\napi_router.include_router(tasks.router, prefix=\"/tasks\", tags=[\"tasks\"])\\napi_router.include_router(weather.router, prefix=\"/weather\", tags=[\"weather\"])\\napi_router.include_router(drone_connections.router, prefix=\"/drone-connections\", tags=[\"drone-connections\"])\\napi_router.include_router(real_mission_execution.router, prefix=\"/real-mission-execution\", tags=[\"real-mission-execution\"])"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\adaptive_planning.py",
      "size": 20312,
      "hash": "397A872AB7FD0A6BC4E682E89AB4B0B0400E2C4F",
      "status": "present",
      "head_excerpt": "\"\"\"\\nAdaptive Planning API endpoints for dynamic mission optimization.\\n\"\"\"\\nimport logging\\nfrom typing import List, Optional, Dict, Any",
      "tail_excerpt": "        OptimizationStrategy.COVERAGE_OPTIMAL: \"Maximize area coverage for thorough searches\",\\n        OptimizationStrategy.BATTERY_CONSERVATIVE: \"Minimize battery usage for extended operations\",\\n        OptimizationStrategy.ADAPTIVE: \"Dynamic optimization based on real-time conditions\"\\n    }\\n    return descriptions.get(strategy, \"Unknown strategy\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\ai_governance.py",
      "size": 10364,
      "hash": "AF8D2D83AF3DF961C65A6F7DFCA850793F762B39",
      "status": "present",
      "head_excerpt": "\"\"\"\\nAI Governance API endpoints\\nProvides access to AI decision tracking, performance metrics, and governance controls\\n\"\"\"\\nfrom typing import Dict, List, Any, Optional",
      "tail_excerpt": "            \"message\": \"Emergency override activated - AI decision overridden\"\\n        }\\n    except Exception as e:\\n        logger.error(f\"Error processing emergency override: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Internal server error\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\analytics.py",
      "size": 20203,
      "hash": "0D334FE64BFDA7F4DE81386E6FCA4B526DEAB40F",
      "status": "present",
      "head_excerpt": "import logging\\nfrom typing import List, Dict, Any, Optional\\nfrom fastapi import APIRouter, Depends, HTTPException, Query\\nfrom sqlalchemy.orm import Session\\nfrom fastapi.responses import JSONResponse",
      "tail_excerpt": "            \"report\": report\\n        })\\n    except Exception as e:\\n        logger.error(f\"Error getting battery usage report: {e}\", exc_info=True)\\n        raise HTTPException(status_code=500, detail=f\"Failed to get battery usage report: {e}\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\chat.py",
      "size": 11230,
      "hash": "52F998CEB75724EAD5AA5C8A0788810AF70CA16E",
      "status": "present",
      "head_excerpt": "\"\"\"\\nChat API endpoints for conversational AI.\\n\"\"\"\\nfrom typing import List, Dict, Any\\nfrom fastapi import APIRouter, Depends, HTTPException, status",
      "tail_excerpt": "    except HTTPException:\\n        raise\\n    except Exception as e:\\n        logger.error(f\"Error deleting chat session {session_id}: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Internal server error\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\computer_vision.py",
      "size": 17032,
      "hash": "8D3F64DD9A65266963EBCB052CEFE94403C565B0",
      "status": "present",
      "head_excerpt": "\"\"\"\\nComputer Vision API endpoints for object detection and image analysis.\\n\"\"\"\\nimport logging\\nfrom typing import List, Optional, Dict, Any",
      "tail_excerpt": "    except HTTPException:\\n        raise\\n    except Exception as e:\\n        logger.error(f\"Detection test failed: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Detection test failed\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\coordination.py",
      "size": 1715,
      "hash": "81278752A2A1BE66BA4F9CA0DC103A5DE9B074CA",
      "status": "present",
      "head_excerpt": "\"\"\"\\nCoordination API endpoints.\\n\"\"\"\\nfrom typing import Dict, Any, List\\nfrom fastapi import APIRouter, Depends, HTTPException",
      "tail_excerpt": "            ]\\n        }\\n    except Exception as e:\\n        logger.error(f\"Error processing emergency: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Internal server error\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\discoveries.py",
      "size": 13622,
      "hash": "3309341EF7C15A8AAD432C4F0EC929784ECA664A",
      "status": "present",
      "head_excerpt": "\"\"\"\\nDiscovery API endpoints.\\n\"\"\"\\nfrom typing import List, Dict, Any\\nfrom fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File",
      "tail_excerpt": "    except HTTPException:\\n        raise\\n    except Exception as e:\\n        logger.error(f\"Error completing investigation for discovery {discovery_id}: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Internal server error\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\drones.py",
      "size": 2289,
      "hash": "9FA04B2CDFF6DA75D20EC223B2638D21BD0AECF8",
      "status": "present",
      "head_excerpt": "\"\"\"\\nDrone management endpoints.\\n\"\"\"\\nfrom typing import List, Optional\\nfrom fastapi import APIRouter, Depends, HTTPException, Query",
      "tail_excerpt": "    if not drone:\\n        raise HTTPException(status_code=404, detail=\"Drone not found\")\\n    db.delete(drone)\\n    db.commit()\\n    return {\"message\": \"Drone deleted successfully\"}"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\drone_connections.py",
      "size": 17199,
      "hash": "97D5AACD24A033E308D5AA78ED015D99CE7E0165",
      "status": "present",
      "head_excerpt": "\"\"\"\\nDrone Connection Management API Endpoints\\nProvides REST API for managing drone connections and communication\\n\"\"\"\\nfrom fastapi import APIRouter, HTTPException, Depends, BackgroundTasks",
      "tail_excerpt": "            \"timestamp\": datetime.utcnow().isoformat()\\n        }\\n    except Exception as e:\\n        logger.error(f\"Error stopping discovery: {e}\")\\n        raise HTTPException(status_code=500, detail=str(e))"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\learning_system.py",
      "size": 16714,
      "hash": "E2AFF3F84E37A9A43F32288E8FB8FA0C684B0FB4",
      "status": "present",
      "head_excerpt": "\"\"\"\\nLearning System API endpoints for performance improvement algorithms.\\n\"\"\"\\nimport logging\\nfrom typing import List, Optional, Dict, Any",
      "tail_excerpt": "        PerformanceMetric.FLIGHT_PATH_OPTIMIZATION: \"Efficiency of flight paths and navigation\",\\n        PerformanceMetric.WEATHER_ADAPTATION: \"Adaptation to weather conditions and environmental factors\",\\n        PerformanceMetric.DRONE_COORDINATION: \"Multi-drone coordination and collaboration effectiveness\"\\n    }\\n    return descriptions.get(metric, \"Unknown metric\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\missions.py",
      "size": 14975,
      "hash": "F6F324AB29C51E8D298D898DCB57A052381E001B",
      "status": "present",
      "head_excerpt": "\"\"\"\\nMission API endpoints.\\n\"\"\"\\nfrom typing import List, Dict, Any\\nfrom fastapi import APIRouter, Depends, HTTPException, status",
      "tail_excerpt": "    except HTTPException:\\n        raise\\n    except Exception as e:\\n        logger.error(f\"Error fetching mission status for {mission_id}: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Internal server error\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\real_mission_execution.py",
      "size": 8008,
      "hash": "BAD54E80E6D230F08E057E3191BDD3B378377D09",
      "status": "present",
      "head_excerpt": "\"\"\"\\nReal Mission Execution API Endpoints\\nProvides REST API for executing missions on real drones\\n\"\"\"\\nfrom fastapi import APIRouter, HTTPException, Depends, BackgroundTasks",
      "tail_excerpt": "            \"success\": False,\\n            \"status\": \"unhealthy\",\\n            \"error\": str(e),\\n            \"timestamp\": datetime.utcnow().isoformat()\\n        }"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\tasks.py",
      "size": 4553,
      "hash": "E5BA92F278E8F8F348D05042001A12E3525EF5AF",
      "status": "present",
      "head_excerpt": "\"\"\"\\nTask management API endpoints.\\n\"\"\"\\nfrom typing import Dict, Any, List\\nfrom fastapi import APIRouter, Depends, HTTPException",
      "tail_excerpt": "    except HTTPException:\\n        raise\\n    except Exception as e:\\n        logger.error(f\"Error failing task {task_id}: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Internal server error\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\video.py",
      "size": 6846,
      "hash": "12120D59CAF454E77FD6B726C508A72AD874AB7F",
      "status": "present",
      "head_excerpt": "\"\"\"\\nVideo streaming endpoints for SAR Mission Commander\\nProvides WebSocket endpoints for real-time video streaming\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "        else:\\n            raise HTTPException(status_code=404, detail=\"No active stream found\")\\n    except Exception as e:\\n        logger.error(f\"Error stopping video stream for drone {drone_id}: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Failed to stop video stream\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\weather.py",
      "size": 3766,
      "hash": "7F42B57A22B183259AFEBEA0C7143046057E6387",
      "status": "present",
      "head_excerpt": "\"\"\"\\nWeather API endpoints.\\n\"\"\"\\nfrom typing import Dict, Any, List\\nfrom fastapi import APIRouter, Depends, HTTPException",
      "tail_excerpt": "            \"alerts\": alerts\\n        }\\n    except Exception as e:\\n        logger.error(f\"Error fetching weather alerts: {e}\")\\n        raise HTTPException(status_code=500, detail=\"Internal server error\")"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\websocket.py",
      "size": 100,
      "hash": "CEFE3CD0044FF5E157285AC229850783E1B8358E",
      "status": "present",
      "head_excerpt": "# Import the websocket router from the parent directory\\nfrom app.api.api_v1.websocket import router",
      "tail_excerpt": "# Import the websocket router from the parent directory\\nfrom app.api.api_v1.websocket import router"
    },
    {
      "path": "backend\\app\\api\\api_v1\\endpoints\\__init__.py",
      "size": 23,
      "hash": "634741E72F19D66E39F53B4E3549279C38F55279",
      "status": "present",
      "head_excerpt": "# API endpoints package",
      "tail_excerpt": "# API endpoints package"
    },
    {
      "path": "backend\\app\\communication\\drone_connection_hub.py",
      "size": 20705,
      "hash": "A90E0B6C74C63FF4907D56B7090F726326EA60CE",
      "status": "present",
      "head_excerpt": "\"\"\"\\nDrone Connection Hub for SAR Mission Commander\\nCentral hub for managing all drone connections and communication protocols\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "                for connection_type in DroneConnectionType\\n            }\\n        }\\n# Global connection hub instance\\ndrone_connection_hub = DroneConnectionHub()"
    },
    {
      "path": "backend\\app\\communication\\drone_registry.py",
      "size": 12980,
      "hash": "936353A2DCC38FBD38E76E5835FA07B682077D1A",
      "status": "present",
      "head_excerpt": "\"\"\"\\nDrone Registry for SAR Mission Commander\\nManages drone discovery, registration, and connection status\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "        if not drone_info.connection_params:\\n            return False\\n        return True\\n# Global drone registry instance\\ndrone_registry = DroneRegistry()"
    },
    {
      "path": "backend\\app\\communication\\__init__.py",
      "size": 610,
      "hash": "67BE9FC1C3DB984F55FF70B4FCCF7DB06F35E8FC",
      "status": "present",
      "head_excerpt": "\"\"\"\\nCommunication Package for SAR Drone System\\nHandles wireless communication protocols for drone connections\\n\"\"\"\\nfrom .drone_connection_hub import DroneConnectionHub",
      "tail_excerpt": "    'LoRaConnection',\\n    'MAVLinkConnection',\\n    'WebSocketDroneConnection',\\n    'DroneRegistry'\\n]"
    },
    {
      "path": "backend\\app\\communication\\protocols\\base_connection.py",
      "size": 10917,
      "hash": "6F0F0D191CE91376DF8C6F9566D6CDA2E8007B29",
      "status": "present",
      "head_excerpt": "\"\"\"\\nBase Connection Class for Drone Communication Protocols\\nProvides common interface for all drone communication methods\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            \"status\": self.status.value,\\n            \"last_heartbeat\": self.last_heartbeat.isoformat() if self.last_heartbeat else None,\\n            \"running\": self._running,\\n            \"config\": asdict(self.config)\\n        }"
    },
    {
      "path": "backend\\app\\communication\\protocols\\lora_connection.py",
      "size": 13804,
      "hash": "99CA0B03307EE51ACD3168A9C48A9335BE70ABDD",
      "status": "present",
      "head_excerpt": "\"\"\"\\nLoRa Connection for Drone Communication\\nImplements LoRa radio communication for long-range drone connections\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            \"coding_rate\": self.config.coding_rate,\\n            \"tx_power\": self.config.tx_power,\\n            \"device_path\": self.config.device_path,\\n            \"baudrate\": self.config.baudrate\\n        }"
    },
    {
      "path": "backend\\app\\communication\\protocols\\mavlink_connection.py",
      "size": 15146,
      "hash": "EFECF68883072CB4CC7CC99FA768647E2FCC849F",
      "status": "present",
      "head_excerpt": "\"\"\"\\nMAVLink Connection for Drone Communication\\nImplements MAVLink protocol for ArduPilot/PX4 drones\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            \"port\": self.config.port if self.config.connection_type in [\"tcp\", \"udp\"] else None,\\n            \"mavlink_version\": self.config.mavlink_version,\\n            \"system_id\": self.config.system_id,\\n            \"component_id\": self.config.component_id\\n        }"
    },
    {
      "path": "backend\\app\\communication\\protocols\\websocket_connection.py",
      "size": 13245,
      "hash": "7F284C40CF2EFF63A66D6D9BDC270C43BDCCC397",
      "status": "present",
      "head_excerpt": "\"\"\"\\nWebSocket Connection for Drone Communication\\nImplements WebSocket communication for drone connections\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            \"ping_interval\": self.config.ping_interval,\\n            \"ping_timeout\": self.config.ping_timeout,\\n            \"max_message_size\": self.config.max_size,\\n            \"compression\": self.config.compression\\n        }"
    },
    {
      "path": "backend\\app\\communication\\protocols\\wifi_connection.py",
      "size": 15429,
      "hash": "3FF3528583FD85D58C8E225FE5A74F76401B0C67",
      "status": "present",
      "head_excerpt": "\"\"\"\\nWiFi Connection for Drone Communication\\nImplements TCP/UDP communication over WiFi networks\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            \"host\": self.config.host,\\n            \"port\": self.config.port,\\n            \"encryption_enabled\": bool(self.config.encryption_key),\\n            \"compression_enabled\": self.config.compression\\n        }"
    },
    {
      "path": "backend\\app\\communication\\protocols\\__init__.py",
      "size": 535,
      "hash": "BA2EA61CB65D3812200C6AE0C8C41C120CF78407",
      "status": "present",
      "head_excerpt": "\"\"\"\\nCommunication Protocols Package\\nImplements various wireless communication protocols for drone connections\\n\"\"\"\\nfrom .base_connection import BaseConnection, ConnectionStatus",
      "tail_excerpt": "    'WiFiConnection',\\n    'LoRaConnection',\\n    'MAVLinkConnection',\\n    'WebSocketDroneConnection'\\n]"
    },
    {
      "path": "backend\\app\\core\\config.py",
      "size": 4010,
      "hash": "FE6B1A1B31A1F0E202B1A8C4E0DD77356FE0E798",
      "status": "present",
      "head_excerpt": "import os\\nfrom typing import Optional, List\\nfrom pydantic import field_validator, ConfigDict\\nfrom pydantic_settings import BaseSettings\\nimport logging",
      "tail_excerpt": ")\\nlogger.info(f\"Settings loaded: {settings.PROJECT_NAME}\")\\nlogger.info(f\"Database: {settings.DATABASE_URL}\")\\nlogger.info(f\"Ollama: {settings.OLLAMA_HOST}\")\\nlogger.info(f\"CORS Origins: {settings.ALLOWED_ORIGINS}\")"
    },
    {
      "path": "backend\\app\\core\\database.py",
      "size": 4167,
      "hash": "4BF986ADDB7E8FF1D0341CEDF6BA25A420AA5924",
      "status": "present",
      "head_excerpt": "from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker\\nfrom sqlalchemy import String, Integer, DateTime, Float, Boolean, Text, create_engine, text\\nfrom sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker\\nimport logging\\nfrom datetime import datetime",
      "tail_excerpt": "            await session.execute(text(\"SELECT 1\"))\\n        return True\\n    except Exception as e:\\n        logger.error(f\"Database health check failed: {e}\")\\n        return False"
    },
    {
      "path": "backend\\app\\core\\security.py",
      "size": 5605,
      "hash": "CFBB145B289AD59D67D8DDFBD7F9556C4B61856A",
      "status": "present",
      "head_excerpt": "import logging\\nfrom datetime import datetime, timedelta\\nfrom typing import Optional, Union\\nfrom jose import JWTError, jwt\\nfrom passlib.context import CryptContext",
      "tail_excerpt": "    access_token = create_access_token(\\n        data={\"sub\": str(user.id), \"username\": user.username},\\n        expires_delta=access_token_expires\\n    )\\n    return access_token"
    },
    {
      "path": "backend\\app\\core\\__init__.py",
      "size": 27,
      "hash": "7345872B596E51A956B18CE6D3489ABE88AA61BC",
      "status": "present",
      "head_excerpt": "# Core application modules",
      "tail_excerpt": "# Core application modules"
    },
    {
      "path": "backend\\app\\data\\mock_data_generator.py",
      "size": 22393,
      "hash": "0CCF81E16C6E782917F65A44D1F06807D91B096D",
      "status": "present",
      "head_excerpt": "\"\"\"\\nMock Data Generator for SAR Drone System Testing\\nGenerates realistic telemetry, mission, and discovery data for development and testing\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "    \"\"\"Generate test telemetry data\"\"\"\\n    return mock_data_generator.generate_telemetry_stream(mission, duration_minutes=duration_minutes)\\nasync def generate_test_discoveries(mission: MissionData, telemetry: List[DroneTelemetry]) -> List[Dict[str, Any]]:\\n    \"\"\"Generate test discovery data\"\"\"\\n    return mock_data_generator.generate_discovery_data(mission, telemetry)"
    },
    {
      "path": "backend\\app\\data\\__init__.py",
      "size": 69,
      "hash": "FFB0177637105B5F6CCB21280F3C57E34EB173F4",
      "status": "present",
      "head_excerpt": "\"\"\"\\nData generation and management modules for SAR drone system.\\n\"\"\"",
      "tail_excerpt": "\"\"\"\\nData generation and management modules for SAR drone system.\\n\"\"\""
    },
    {
      "path": "backend\\app\\database\\real_database.py",
      "size": 26239,
      "hash": "2419F75E9D6FB41D66E8632D4702CBC0A7BF7DC1",
      "status": "present",
      "head_excerpt": "\"\"\"\\nREAL Database Implementation for SAR Mission Commander\\nPostgreSQL with real schemas, data persistence, and performance optimization\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            self.engine.dispose()\\n            self.is_connected = False\\n            logger.info(\"Database connection closed\")\\n# Global database instance\\nreal_database = RealDatabase()"
    },
    {
      "path": "backend\\app\\database\\sqlite_fallback.py",
      "size": 10515,
      "hash": "4E8451E6BB462BD6708FC4C49044323FB96719F5",
      "status": "present",
      "head_excerpt": "\"\"\"\\nSQLite Fallback Database for Testing\\nFallback when PostgreSQL is not available\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "        except Exception as e:\\n            logger.error(f\"Failed to get mission performance: {e}\")\\n            return {}\\n# Global fallback database instance\\nsqlite_fallback = SQLiteFallback()"
    },
    {
      "path": "backend\\app\\integration\\real_system_integration.py",
      "size": 32277,
      "hash": "5F89868C5BC71C0937DECB985FBABE04C94E9B47",
      "status": "present",
      "head_excerpt": "\"\"\"\\nREAL System Integration for SAR Mission Commander\\nIntegrates all real components: Computer Vision, ML Models, Drone Simulation, Database, Genetic Algorithm\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "                'status': 'unhealthy',\\n                'error': str(e)\\n            }\\n# Global integrated system instance\\nreal_system_integration = RealSystemIntegration()"
    },
    {
      "path": "backend\\app\\models\\advanced_models.py",
      "size": 19755,
      "hash": "0080B583BBA9608B9C3D13070FC305D5937603DD",
      "status": "present",
      "head_excerpt": "\"\"\"\\nAdvanced database models for production SAR system\\nIncludes vector embeddings, knowledge graphs, and ML model metadata\\n\"\"\"\\nfrom sqlalchemy import Column, String, Text, DateTime, Float, Boolean, JSON, ForeignKey, Integer, Index, UniqueConstraint",
      "tail_excerpt": "        Index('idx_alert_history_rule', 'rule_id'),\\n        Index('idx_alert_history_status', 'status'),\\n        Index('idx_alert_history_triggered', 'triggered_at'),\\n        Index('idx_alert_history_severity', 'severity'),\\n    )"
    },
    {
      "path": "backend\\app\\models\\chat.py",
      "size": 1796,
      "hash": "3743CCAFD08C6524198930DBA1408E937A5A393A",
      "status": "present",
      "head_excerpt": "\"\"\"\\nChat models for SAR Mission Commander\\n\"\"\"\\nfrom sqlalchemy import Column, Integer, String, DateTime, Text, Enum, ForeignKey, Float\\nfrom sqlalchemy.orm import relationship",
      "tail_excerpt": "    context_data = Column(Text)  # Mission planning context\\n    conversation_history = Column(Text)  # Recent conversation for AI context\\n    # Relationships\\n    mission = relationship(\"Mission\", back_populates=\"chat_sessions\", foreign_keys=[mission_id])\\n    messages = relationship(\"ChatMessageDB\", back_populates=\"session\")"
    },
    {
      "path": "backend\\app\\models\\discovery.py",
      "size": 4476,
      "hash": "CC948DD62CAED46D66A8FE39D79A15DE391662F7",
      "status": "present",
      "head_excerpt": "from sqlalchemy import Column, String, Text, DateTime, Float, Boolean, JSON, ForeignKey, Integer, Enum\\nfrom sqlalchemy.orm import relationship\\nfrom datetime import datetime\\nfrom enum import Enum as PyEnum\\nfrom ..core.database import Base",
      "tail_excerpt": "    uploaded_by = Column(String(100))\\n    processed = Column(Boolean, default=False)\\n    thumbnail_path = Column(String(500))\\n    # Relationships\\n    discovery = relationship(\"Discovery\", back_populates=\"evidence_files\")"
    },
    {
      "path": "backend\\app\\models\\drone.py",
      "size": 6980,
      "hash": "6DAD9967FA18E70C487F90F6AFC53677B1E39999",
      "status": "present",
      "head_excerpt": "from sqlalchemy import Column, String, Float, DateTime, Boolean, JSON, Integer, Text, ForeignKey\\nfrom sqlalchemy.orm import relationship\\nfrom datetime import datetime\\nfrom enum import Enum\\nfrom ..core.database import Base",
      "tail_excerpt": "    data_rate = Column(Float)\\n    # Timestamp\\n    timestamp = Column(DateTime, default=datetime.utcnow)\\n    # Relationships\\n    drone = relationship(\"Drone\", back_populates=\"telemetry_data\")"
    },
    {
      "path": "backend\\app\\models\\mission.py",
      "size": 5135,
      "hash": "A7B1BECF4829BE793CF5ED5D0E72E66E3C791982",
      "status": "present",
      "head_excerpt": "from sqlalchemy import Column, String, Text, DateTime, Float, Boolean, JSON, ForeignKey, Integer\\nfrom sqlalchemy.orm import relationship\\nfrom datetime import datetime\\nfrom enum import Enum\\nfrom ..core.database import Base",
      "tail_excerpt": "    assigned_area = Column(JSON)\\n    current_waypoint = Column(JSON)\\n    # Relationships\\n    mission = relationship(\"Mission\", back_populates=\"drone_assignments\")\\n    drone = relationship(\"Drone\", back_populates=\"mission_assignments\")"
    },
    {
      "path": "backend\\app\\models\\user.py",
      "size": 933,
      "hash": "8F8625F5717E6A601F163765E202C7B26C81A4ED",
      "status": "present",
      "head_excerpt": "from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text\\nfrom sqlalchemy.sql import func\\nfrom app.core.database import Base\\nclass User(Base):\\n    \"\"\"User model for authentication\"\"\"",
      "tail_excerpt": "    created_at = Column(DateTime(timezone=True), server_default=func.now())\\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\\n    last_login = Column(DateTime(timezone=True))\\n    def __repr__(self):\\n        return f\"<User(id={self.id}, username='{self.username}', email='{self.email}')>\""
    },
    {
      "path": "backend\\app\\models\\__init__.py",
      "size": 335,
      "hash": "80BBFD45463AE32E58CF6624C267C139276EF252",
      "status": "present",
      "head_excerpt": "from .mission import Mission, MissionDrone\\nfrom .drone import Drone, TelemetryData\\nfrom .discovery import Discovery, EvidenceFile\\nfrom .chat import ChatSession, ChatMessageDB\\n__all__ = [",
      "tail_excerpt": "    \"Drone\",\\n    \"TelemetryData\",\\n    \"Discovery\",\\n    \"EvidenceFile\"\\n]"
    },
    {
      "path": "backend\\app\\monitoring\\alerting.py",
      "size": 24432,
      "hash": "53AFD9373DECD7C4813FF5BECA72CED0544AABF9",
      "status": "present",
      "head_excerpt": "\"\"\"\\nAdvanced Alerting System for SAR Drone Operations\\nReal-time alerting with escalation and notification management\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "            \"enabled_channels\": len([c for c in self.notification_channels.values() if c.enabled]),\\n            \"last_update\": datetime.utcnow().isoformat()\\n        }\\n# Global alert manager instance\\nalert_manager = AlertManager()"
    },
    {
      "path": "backend\\app\\monitoring\\metrics.py",
      "size": 18658,
      "hash": "34741499E5012FD27D4E0493142CC1D7F992B624",
      "status": "present",
      "head_excerpt": "\"\"\"\\nComprehensive Monitoring and Metrics Collection\\nProduction-grade observability for SAR Drone System\\n\"\"\"\\nimport time",
      "tail_excerpt": "        yield\\n    finally:\\n        duration = time.time() - start_time\\n        # This would be called with actual status code in the actual request handler\\n        # metrics_collector.record_api_request(method, endpoint, status_code, duration)"
    },
    {
      "path": "backend\\app\\monitoring\\observability.py",
      "size": 38387,
      "hash": "35DD5EB03D3EB397631723495EF5D02547580FF3",
      "status": "present",
      "head_excerpt": "\"\"\"\\nProduction Monitoring and Observability System\\nComprehensive monitoring, logging, and alerting for SAR operations\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "        except Exception as e:\\n            logger.error(f\"Failed to get system status: {e}\")\\n            return {\"error\": str(e)}\\n# Global observability system instance\\nobservability_system = ObservabilitySystem()"
    },
    {
      "path": "backend\\app\\pipeline\\etl_pipeline.py",
      "size": 25605,
      "hash": "E52E31B784AB938123C375CCF516B754C0376A2C",
      "status": "present",
      "head_excerpt": "\"\"\"\\nComplete ETL Pipeline for SAR Drone System\\nData extraction, transformation, and loading with ML integration\\n\"\"\"\\nimport asyncio",
      "tail_excerpt": "def initialize_etl_pipeline(config: Dict[str, Any]):\\n    \"\"\"Initialize global ETL pipeline\"\"\"\\n    global etl_pipeline\\n    etl_pipeline = ETLPipeline(config)\\n    return etl_pipeline"
    }
  ],
  "directory_structure": [
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\.github",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\.github\\workflows",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\ai_innovations",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\ai",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\api",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\api\\api_v1",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\api\\api_v1\\endpoints",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\communication",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\communication\\protocols",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\core",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\data",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\database",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\integration",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\models",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\monitoring",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\pipeline",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\security",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\services",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\simulator",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\backend\\app\\utils",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\demo_system",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\deployment",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\deployment\\kubernetes",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\deployment\\scripts",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\deployment\\terraform",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\docs",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\public",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\Layout",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\adaptivePlanning",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\analytics",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\computerVision",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\discovery",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\drone",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\emergency",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\learningSystem",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\map",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\mission",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\notifications",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\settings",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\simulation",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\ui",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\video",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\components\\websocket",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\contexts",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\pages",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\services",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\types",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\frontend\\src\\utils",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\isef_materials",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\monitoring",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\monitoring\\grafana",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\monitoring\\grafana\\provisioning",
    "C:\\Central_Computer\\central_computer_sar-drone-swarm-main\\central_computer_sar-drone-swarm-main\\monitoring\\grafana\\provisioning\\datasources"
  ],
  "existing_major_directories": [
    "backend/app/ai",
    "backend/app/api",
    "backend/app/api/api_v1/endpoints",
    "backend/app/communication",
    "backend/app/communication/protocols",
    "backend/app/core",
    "backend/app/data",
    "backend/app/database",
    "backend/app/integration",
    "backend/app/models",
    "backend/app/monitoring",
    "backend/app/pipeline",
    "backend/app/security",
    "backend/app/services",
    "backend/app/simulator",
    "backend/app/utils",
    "frontend/src",
    "frontend/src/components",
    "frontend/src/services",
    "frontend/src/types",
    "ai_innovations",
    "deployment/kubernetes",
    "deployment/terraform",
    "docs"
  ],
  "missing_critical_files": [
    "backend/tests - ENTIRE DIRECTORY MISSING",
    "backend/app/hardware - ENTIRE DIRECTORY MISSING",
    "backend/app/hardware/emergency_mavlink.py - MAVLink emergency protocols",
    "backend/app/hardware/pi_hardware_interface.py - Pi hardware integration",
    "backend/app/communication/pi_communication.py - Central->Pi communication",
    "backend/app/communication/json_protocol.py - JSON mission protocol",
    "backend/tests/test_mission_planner.py - Mission planner tests",
    "backend/tests/test_coordination.py - Coordination tests",
    "backend/tests/test_computer_vision.py - CV tests",
    "backend/tests/conftest.py - Pytest configuration"
  ],
  "missing_critical_directories": [
    "backend/tests",
    "backend/app/hardware"
  ],
  "assessment": {
    "overall_status": "CODEBASE MOSTLY INTACT - MISSING TEST SUITE AND HARDWARE INTEGRATION",
    "data_loss_severity": "MODERATE",
    "frontend_status": "COMPLETE - All React components, services, and types present",
    "backend_core_status": "COMPLETE - FastAPI app, all services, AI modules present",
    "backend_tests_status": "MISSING - Entire test suite absent",
    "hardware_integration_status": "MISSING - Hardware communication layer absent",
    "documentation_status": "COMPLETE - Build plan, README, operational runbooks present",
    "deployment_status": "COMPLETE - Docker, Kubernetes, Terraform configs present"
  },
  "recommended_rebuild_order": [
    "1. CREATE backend/tests directory structure",
    "2. CREATE backend/app/hardware directory",
    "3. RESTORE backend/app/hardware/emergency_mavlink.py - Emergency MAVLink protocols for flight controller safety",
    "4. RESTORE backend/app/hardware/pi_hardware_interface.py - Raspberry Pi GPIO and hardware abstraction",
    "5. RESTORE backend/app/communication/pi_communication.py - Central computer to Pi JSON communication",
    "6. RESTORE backend/app/communication/json_protocol.py - Mission JSON schema and validation",
    "7. RESTORE backend/tests/conftest.py - Pytest configuration and fixtures",
    "8. RESTORE backend/tests/test_mission_planner.py - Mission planning tests",
    "9. RESTORE backend/tests/test_coordination.py - Multi-drone coordination tests",
    "10. RESTORE backend/tests/test_computer_vision.py - Computer vision detection tests",
    "11. RESTORE backend/tests/test_services.py - Service layer integration tests",
    "12. RESTORE backend/tests/test_api.py - API endpoint tests",
    "13. RUN verification suite to ensure system functionality"
  ],
  "verification_commands": [
    "git status --porcelain  # (Will fail - no git repo)",
    "python -m compileall backend/  # Check Python syntax",
    "cd backend && python -m pytest --collect-only -q  # (Will fail - no tests)",
    "cd backend && python -m pytest -v  # (Will fail - no tests)",
    "cd backend && uvicorn app.main:app --host 0.0.0.0 --port 8000  # Start backend server",
    "cd frontend && npm install && npm run build  # Build frontend",
    "cd frontend && npm test  # Run frontend tests"
  ],
  "priority_actions": [
    "IMMEDIATE: Restore backend/tests directory with comprehensive test suite",
    "IMMEDIATE: Create backend/app/hardware module for MAVLink and Pi integration",
    "HIGH: Restore backend/app/communication/pi_communication.py for drone JSON protocol",
    "HIGH: Initialize git repository for version control",
    "MEDIUM: Run compilation checks to identify any syntax errors",
    "MEDIUM: Verify all Python imports resolve correctly",
    "LOW: Add missing documentation for new modules"
  ],
  "system_readiness_checklist": {
    "backend_api": "READY - FastAPI app fully implemented",
    "frontend_ui": "READY - React application complete",
    "ai_intelligence": "READY - LLM, RAG, knowledge graph, CV all implemented",
    "database": "READY - SQLAlchemy models and database layer complete",
    "communication": "PARTIAL - WebSocket ready, Pi communication missing",
    "hardware_integration": "MISSING - MAVLink and Pi hardware interface absent",
    "test_coverage": "MISSING - No test files present",
    "deployment": "READY - Docker, K8s, Terraform configured",
    "documentation": "COMPLETE - Comprehensive docs present"
  },
  "next_steps": "Begin Phase 1 reconstruction by creating missing test infrastructure and hardware integration modules. Prioritize safety-critical MAVLink emergency protocols."
}