"""
Mock Detection System for SAR Mission Testing

This module provides realistic simulated object detection and discovery scenarios
for testing the SAR system without requiring actual drone hardware or computer vision.
"""

import asyncio
import random
import math
import json
from datetime import datetime, timedelta
from enum import Enum
from typing import Dict, List, Optional, Tuple, Any, Callable
from dataclasses import dataclass, field
import logging

logger = logging.getLogger(__name__)


class DetectionMethod(Enum):
    """Detection methods available in simulation"""
    VISUAL = "visual"
    THERMAL = "thermal"
    MULTISPECTRAL = "multispectral"
    RADAR = "radar"
    LIDAR = "lidar"
    AI_COMPUTER_VISION = "ai_computer_vision"


class ObjectType(Enum):
    """Types of objects that can be detected"""
    PERSON = "person"
    VEHICLE = "vehicle"
    AIRCRAFT = "aircraft"
    BOAT = "boat"
    BUILDING = "building"
    STRUCTURE = "structure"
    DEBRIS = "debris"
    FIRE = "fire"
    SMOKE = "smoke"
    ANIMAL = "animal"
    UNKNOWN = "unknown"


class EnvironmentalCondition(Enum):
    """Environmental conditions affecting detection"""
    CLEAR = "clear"
    CLOUDY = "cloudy"
    RAINY = "rainy"
    FOGGY = "foggy"
    NIGHT = "night"
    DUSTY = "dusty"
    SMOKY = "smoky"


class ScenarioType(Enum):
    """Predefined SAR mission scenarios"""
    BUILDING_COLLAPSE = "building_collapse"
    WILDERNESS_SEARCH = "wilderness_search"
    FLOOD_RESCUE = "flood_rescue"
    AVALANCHE_SEARCH = "avalanche_search"
    URBAN_FIRE = "urban_fire"
    MARITIME_SEARCH = "maritime_search"
    TRAFFIC_ACCIDENT = "traffic_accident"
    MISSING_PERSON = "missing_person"


@dataclass
class DetectionObject:
    """Represents a detectable object in the simulation"""
    object_id: str
    object_type: ObjectType
    position: Tuple[float, float, float]  # latitude, longitude, altitude
    size: Tuple[float, float, float]  # width, height, depth in meters
    confidence_threshold: float = 0.7
    detection_methods: List[DetectionMethod] = field(default_factory=list)
    environmental_visibility: Dict[EnvironmentalCondition, float] = field(default_factory=dict)
    movement_pattern: str = "static"  # static, random_walk, patrol, fleeing
    is_mobile: bool = False
    detection_probability: float = 0.8
    false_positive_rate: float = 0.05


@dataclass
class DetectionEvent:
    """A detection event generated by the simulation"""
    event_id: str
    timestamp: datetime
    drone_id: str
    object_type: ObjectType
    confidence_score: float
    position: Tuple[float, float, float]
    detection_method: DetectionMethod
    environmental_conditions: Dict[str, Any]
    sensor_data: Dict[str, Any]
    metadata: Dict[str, Any] = field(default_factory=dict)


class MockDetectionSystem:
    """
    Advanced mock detection system for SAR mission testing.

    Provides:
    - Realistic object detection simulation
    - Various SAR scenario configurations
    - Environmental condition effects
    - Configurable detection parameters
    - Multiple detection methods
    """

    def __init__(self):
        """Initialize the mock detection system"""
        self.objects: Dict[str, DetectionObject] = {}
        self.detection_history: List[DetectionEvent] = []
        self.scenarios: Dict[str, Dict[str, Any]] = {}
        self.active_scenario: Optional[str] = None

        # Detection parameters
        self.detection_callbacks: List[Callable] = []
        self.update_interval = 1.0  # seconds
        self.max_detection_range = 100.0  # meters
        self.min_confidence_threshold = 0.5

        # Environmental conditions
        self.current_conditions = {
            "lighting": "good",
            "weather": "clear",
            "visibility": 10000,  # meters
            "wind_speed": 2.0,
            "temperature": 20.0
        }

        # Initialize predefined scenarios
        self._initialize_scenarios()

        logger.info("Mock detection system initialized")

    def _initialize_scenarios(self):
        """Initialize predefined SAR scenarios"""

        # Building Collapse Scenario
        self.scenarios[ScenarioType.BUILDING_COLLAPSE.value] = {
            "name": "Building Collapse",
            "description": "Multi-story building collapse with trapped survivors",
            "area_size": [200, 150],  # meters
            "objects": [
                DetectionObject(
                    object_id="survivor_1",
                    object_type=ObjectType.PERSON,
                    position=(40.7128, -74.0060, 5.0),
                    size=(0.5, 1.8, 0.3),
                    detection_methods=[DetectionMethod.THERMAL, DetectionMethod.VISUAL],
                    environmental_visibility={EnvironmentalCondition.CLEAR: 0.9, EnvironmentalCondition.NIGHT: 0.7},
                    movement_pattern="static",
                    is_mobile=False,
                    detection_probability=0.8
                ),
                DetectionObject(
                    object_id="survivor_2",
                    object_type=ObjectType.PERSON,
                    position=(40.7129, -74.0061, 8.0),
                    size=(0.5, 1.8, 0.3),
                    detection_methods=[DetectionMethod.THERMAL],
                    environmental_visibility={EnvironmentalCondition.NIGHT: 0.9, EnvironmentalCondition.CLEAR: 0.6},
                    movement_pattern="static",
                    is_mobile=False,
                    detection_probability=0.6
                ),
                DetectionObject(
                    object_id="debris_field",
                    object_type=ObjectType.DEBRIS,
                    position=(40.7127, -74.0059, 0.0),
                    size=(50.0, 30.0, 5.0),
                    detection_methods=[DetectionMethod.RADAR, DetectionMethod.LIDAR],
                    environmental_visibility={EnvironmentalCondition.CLEAR: 0.8, EnvironmentalCondition.RAINY: 0.4},
                    movement_pattern="static",
                    is_mobile=False,
                    detection_probability=0.9
                )
            ]
        }

        # Wilderness Search Scenario
        self.scenarios[ScenarioType.WILDERNESS_SEARCH.value] = {
            "name": "Wilderness Search",
            "description": "Missing person in forested area",
            "area_size": [1000, 800],  # meters
            "objects": [
                DetectionObject(
                    object_id="missing_person",
                    object_type=ObjectType.PERSON,
                    position=(40.7589, -73.9851, 0.0),
                    size=(0.5, 1.8, 0.3),
                    detection_methods=[DetectionMethod.THERMAL, DetectionMethod.VISUAL],
                    environmental_visibility={
                        EnvironmentalCondition.CLEAR: 0.7,
                        EnvironmentalCondition.FOGGY: 0.3,
                        EnvironmentalCondition.NIGHT: 0.8
                    },
                    movement_pattern="random_walk",
                    is_mobile=True,
                    detection_probability=0.6
                ),
                DetectionObject(
                    object_id="abandoned_vehicle",
                    object_type=ObjectType.VEHICLE,
                    position=(40.7595, -73.9845, 0.0),
                    size=(4.0, 2.0, 1.5),
                    detection_methods=[DetectionMethod.VISUAL, DetectionMethod.RADAR],
                    environmental_visibility={EnvironmentalCondition.CLEAR: 0.9, EnvironmentalCondition.FOGGY: 0.5},
                    movement_pattern="static",
                    is_mobile=False,
                    detection_probability=0.8
                )
            ]
        }

        # Maritime Search Scenario
        self.scenarios[ScenarioType.MARITIME_SEARCH.value] = {
            "name": "Maritime Search",
            "description": "Search for vessel or person in water",
            "area_size": [5000, 3000],  # meters
            "objects": [
                DetectionObject(
                    object_id="life_raft",
                    object_type=ObjectType.BOAT,
                    position=(40.6500, -74.1000, 0.0),
                    size=(3.0, 1.5, 0.5),
                    detection_methods=[DetectionMethod.RADAR, DetectionMethod.VISUAL],
                    environmental_visibility={
                        EnvironmentalCondition.CLEAR: 0.8,
                        EnvironmentalCondition.RAINY: 0.4,
                        EnvironmentalCondition.FOGGY: 0.3
                    },
                    movement_pattern="drift",
                    is_mobile=True,
                    detection_probability=0.7
                ),
                DetectionObject(
                    object_id="person_in_water",
                    object_type=ObjectType.PERSON,
                    position=(40.6510, -74.1010, 0.0),
                    size=(0.5, 1.8, 0.3),
                    detection_methods=[DetectionMethod.THERMAL],
                    environmental_visibility={
                        EnvironmentalCondition.CLEAR: 0.6,
                        EnvironmentalCondition.NIGHT: 0.9,
                        EnvironmentalCondition.RAINY: 0.3
                    },
                    movement_pattern="static",
                    is_mobile=False,
                    detection_probability=0.5
                )
            ]
        }

    def add_detection_callback(self, callback: Callable):
        """Add callback for detection events"""
        self.detection_callbacks.append(callback)

    def set_environmental_conditions(self, conditions: Dict[str, Any]):
        """Set current environmental conditions"""
        self.current_conditions.update(conditions)
        logger.info(f"Environmental conditions updated: {conditions}")

    def load_scenario(self, scenario_type: str):
        """Load a predefined scenario"""
        if scenario_type not in self.scenarios:
            raise ValueError(f"Unknown scenario type: {scenario_type}")

        scenario = self.scenarios[scenario_type]
        self.objects.clear()

        # Add scenario objects
        for obj in scenario["objects"]:
            self.objects[obj.object_id] = obj

        self.active_scenario = scenario_type
        logger.info(f"Loaded scenario: {scenario['name']}")

        return scenario

    def add_object(self, obj: DetectionObject):
        """Add a custom detection object"""
        self.objects[obj.object_id] = obj
        logger.info(f"Added detection object: {obj.object_id}")

    def remove_object(self, object_id: str):
        """Remove a detection object"""
        if object_id in self.objects:
            del self.objects[object_id]
            logger.info(f"Removed detection object: {object_id}")

    def update_object_position(self, object_id: str, new_position: Tuple[float, float, float]):
        """Update position of a mobile object"""
        if object_id in self.objects:
            self.objects[object_id].position = new_position
            logger.debug(f"Updated position for object {object_id}: {new_position}")

    async def start_detection_simulation(self):
        """Start the detection simulation loop"""
        logger.info("Starting detection simulation")
        while True:
            try:
                await self._detection_loop()
                await asyncio.sleep(self.update_interval)
            except Exception as e:
                logger.error(f"Detection simulation error: {e}")
                await asyncio.sleep(1.0)

    async def _detection_loop(self):
        """Main detection simulation loop"""
        current_time = datetime.now()

        # Update mobile objects
        await self._update_mobile_objects()

        # Check for detections (simulating drone passes)
        for object_id, obj in self.objects.items():
            # Simulate detection probability based on various factors
            detection_prob = self._calculate_detection_probability(obj)

            if random.random() < detection_prob:
                await self._generate_detection_event(obj, current_time)

    async def _update_mobile_objects(self):
        """Update positions of mobile objects"""
        for object_id, obj in self.objects.items():
            if obj.is_mobile and obj.movement_pattern != "static":
                new_position = self._calculate_new_position(obj)
                self.update_object_position(object_id, new_position)

    def _calculate_new_position(self, obj: DetectionObject) -> Tuple[float, float, float]:
        """Calculate new position for mobile object"""
        current_pos = obj.position
        movement_range = 50.0  # meters

        if obj.movement_pattern == "random_walk":
            # Random movement within range
            delta_lat = random.uniform(-0.001, 0.001) * movement_range / 111320
            delta_lon = random.uniform(-0.001, 0.001) * movement_range / 111320
            new_lat = current_pos[0] + delta_lat
            new_lon = current_pos[1] + delta_lon

        elif obj.movement_pattern == "drift":
            # Simulate water drift
            drift_speed = 0.5  # m/s
            drift_direction = random.uniform(0, 360)
            delta_lat = math.sin(math.radians(drift_direction)) * drift_speed / 111320
            delta_lon = math.cos(math.radians(drift_direction)) * drift_speed / 111320
            new_lat = current_pos[0] + delta_lat
            new_lon = current_pos[1] + delta_lon

        else:
            # Default: small random movement
            new_lat = current_pos[0] + random.uniform(-0.0001, 0.0001)
            new_lon = current_pos[1] + random.uniform(-0.0001, 0.0001)

        return (new_lat, new_lon, current_pos[2])

    def _calculate_detection_probability(self, obj: DetectionObject) -> float:
        """Calculate probability of detecting an object"""
        base_prob = obj.detection_probability

        # Environmental factors
        weather = self.current_conditions.get("weather", "clear")
        lighting = self.current_conditions.get("lighting", "good")
        visibility = self.current_conditions.get("visibility", 10000)

        # Weather impact
        weather_modifiers = {
            "clear": 1.0,
            "cloudy": 0.8,
            "rainy": 0.6,
            "foggy": 0.4,
            "night": 0.9 if lighting == "poor" else 0.7,
            "dusty": 0.5,
            "smoky": 0.3
        }

        weather_factor = weather_modifiers.get(weather, 0.5)

        # Visibility impact (simplified)
        visibility_factor = min(1.0, visibility / 10000.0)

        # Lighting impact
        lighting_factor = 0.6 if lighting == "poor" else 1.0

        # Combine factors
        total_prob = base_prob * weather_factor * visibility_factor * lighting_factor

        # Add some randomness
        total_prob *= random.uniform(0.8, 1.2)

        return min(1.0, max(0.0, total_prob))

    async def _generate_detection_event(self, obj: DetectionObject, timestamp: datetime):
        """Generate a detection event for an object"""
        # Select detection method based on object capabilities and conditions
        available_methods = obj.detection_methods
        if not available_methods:
            available_methods = [DetectionMethod.VISUAL]

        detection_method = random.choice(available_methods)

        # Calculate confidence score
        base_confidence = random.uniform(obj.confidence_threshold, 0.95)

        # Adjust confidence based on conditions
        weather = self.current_conditions.get("weather", "clear")
        if weather == "foggy":
            base_confidence *= 0.8
        elif weather == "rainy":
            base_confidence *= 0.9

        confidence_score = min(0.99, max(0.1, base_confidence))

        # Create detection event
        event = DetectionEvent(
            event_id=f"det_{int(timestamp.timestamp())}_{random.randint(1000, 9999)}",
            timestamp=timestamp,
            drone_id=f"drone_{random.randint(1, 10)}",  # Simulate different drones
            object_type=obj.object_type,
            confidence_score=confidence_score,
            position=obj.position,
            detection_method=detection_method,
            environmental_conditions=self.current_conditions.copy(),
            sensor_data={
                "image_url": f"mock://detection_{obj.object_id}_{timestamp.isoformat()}.jpg",
                "thermal_signature": obj.object_type == ObjectType.PERSON,
                "size_estimate": obj.size,
                "distance_estimate": random.uniform(10, 100)
            },
            metadata={
                "object_id": obj.object_id,
                "scenario": self.active_scenario,
                "detection_algorithm": "simulated"
            }
        )

        # Store in history
        self.detection_history.append(event)

        # Limit history size
        if len(self.detection_history) > 1000:
            self.detection_history = self.detection_history[-500:]

        # Notify callbacks
        for callback in self.detection_callbacks:
            try:
                await callback(event)
            except Exception as e:
                logger.error(f"Detection callback error: {e}")

        logger.info(f"Detection event generated: {obj.object_type.value} at {obj.position} (confidence: {confidence_score:.2f})")

    def get_detection_history(self, limit: int = 100) -> List[DetectionEvent]:
        """Get recent detection history"""
        return self.detection_history[-limit:] if self.detection_history else []

    def get_scenario_info(self, scenario_type: str) -> Optional[Dict[str, Any]]:
        """Get information about a scenario"""
        return self.scenarios.get(scenario_type)

    def list_scenarios(self) -> List[str]:
        """List available scenario types"""
        return list(self.scenarios.keys())

    def get_object_count(self) -> int:
        """Get number of active detection objects"""
        return len(self.objects)

    def get_detection_stats(self) -> Dict[str, Any]:
        """Get detection statistics"""
        if not self.detection_history:
            return {"total_detections": 0, "detections_by_type": {}}

        # Count by object type
        type_counts = {}
        for event in self.detection_history:
            obj_type = event.object_type.value
            type_counts[obj_type] = type_counts.get(obj_type, 0) + 1

        return {
            "total_detections": len(self.detection_history),
            "detections_by_type": type_counts,
            "active_objects": len(self.objects),
            "active_scenario": self.active_scenario
        }


class ScenarioBuilder:
    """
    Helper class for building custom detection scenarios
    """

    def __init__(self):
        self.objects: List[DetectionObject] = []
        self.scenario_name = "Custom Scenario"
        self.area_size = [500, 500]  # meters

    def add_person(self, position: Tuple[float, float, float],
                   mobile: bool = False, visible_at_night: bool = True) -> 'ScenarioBuilder':
        """Add a person object"""
        obj = DetectionObject(
            object_id=f"person_{len(self.objects)}",
            object_type=ObjectType.PERSON,
            position=position,
            size=(0.5, 1.8, 0.3),
            detection_methods=[DetectionMethod.THERMAL, DetectionMethod.VISUAL],
            environmental_visibility={
                EnvironmentalCondition.CLEAR: 0.8,
                EnvironmentalCondition.NIGHT: 0.9 if visible_at_night else 0.3,
                EnvironmentalCondition.FOGGY: 0.4
            },
            is_mobile=mobile,
            movement_pattern="random_walk" if mobile else "static"
        )
        self.objects.append(obj)
        return self

    def add_vehicle(self, position: Tuple[float, float, float]) -> 'ScenarioBuilder':
        """Add a vehicle object"""
        obj = DetectionObject(
            object_id=f"vehicle_{len(self.objects)}",
            object_type=ObjectType.VEHICLE,
            position=position,
            size=(4.0, 2.0, 1.5),
            detection_methods=[DetectionMethod.VISUAL, DetectionMethod.RADAR],
            environmental_visibility={
                EnvironmentalCondition.CLEAR: 0.9,
                EnvironmentalCondition.FOGGY: 0.5,
                EnvironmentalCondition.RAINY: 0.7
            }
        )
        self.objects.append(obj)
        return self

    def add_building(self, position: Tuple[float, float, float],
                     size: Tuple[float, float, float] = (20.0, 15.0, 10.0)) -> 'ScenarioBuilder':
        """Add a building/structure object"""
        obj = DetectionObject(
            object_id=f"building_{len(self.objects)}",
            object_type=ObjectType.BUILDING,
            position=position,
            size=size,
            detection_methods=[DetectionMethod.VISUAL, DetectionMethod.RADAR, DetectionMethod.LIDAR],
            environmental_visibility={
                EnvironmentalCondition.CLEAR: 0.9,
                EnvironmentalCondition.FOGGY: 0.6
            }
        )
        self.objects.append(obj)
        return self

    def set_name(self, name: str) -> 'ScenarioBuilder':
        """Set scenario name"""
        self.scenario_name = name
        return self

    def build(self) -> Dict[str, Any]:
        """Build the scenario dictionary"""
        return {
            "name": self.scenario_name,
            "description": f"Custom scenario with {len(self.objects)} objects",
            "area_size": self.area_size,
            "objects": self.objects
        }