name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements_core_runtime.txt
          pip install coverage
      - name: Run backend tests with coverage
        working-directory: ./
        env:
          PYTEST_ADDOPTS: "--maxfail=1 --disable-warnings"
        run: |
          coverage run -m pytest backend/tests -q
          coverage xml -o backend/coverage.xml
          coverage report --fail-under=70
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.xml

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install frontend deps
        working-directory: ./frontend
        run: |
          npm ci
      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          npm run test -- --coverage --run
      - name: Enforce frontend coverage threshold
        working-directory: ./frontend
        run: |
          node -e "const fs=require('fs');const p='coverage/coverage-summary.json';const s=JSON.parse(fs.readFileSync(p,'utf8'));const pct=s.total.lines.pct; if(pct<50){console.error('Coverage '+pct+'% < 50%');process.exit(1)} else {console.log('Coverage OK: '+pct+'%')}"

  notify:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Slack/Webhook placeholder
        run: |
          echo "Tests failed - add your webhook call here"

name: CI - Backend smoke tests

on:
  push:
    branches:
      - refactor/**
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements_core_runtime.txt

      - name: Compile backend
        run: python -m compileall -q backend/

      - name: Run smoke tests
        env:
          PYTEST_ADDOPTS: "--maxfail=1 --disable-warnings"
        run: |
          pytest backend/tests -q


